# Docker Compose completo para el sistema de auditoría
# Incluye todos los servicios: backend, frontend, postgres, redis, nginx, prometheus, grafana

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: auditoria_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: auditoria_db
      POSTGRES_USER: auditoria_user
      POSTGRES_PASSWORD: auditoria_secure_password_2025!
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auditoria_user -d auditoria_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: auditoria_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend_network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis_secure_password_2025!", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: auditoria_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://auditoria_user:auditoria_secure_password_2025!@postgres:5432/auditoria_db
      - REDIS_URL=redis://:redis_secure_password_2025!@redis:6379/0
      - SECRET_KEY=super-secret-jwt-key-for-auditoria-system-2025-change-in-production-a1b2c3d4e5f6g7h8i9j0
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5173,http://localhost,http://auditoria-frontend
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: auditoria_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_ENVIRONMENT=production
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: auditoria_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - frontend_network
      - monitoring_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: auditoria_prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
      - backend_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: auditoria_node_exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter para métricas de base de datos
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: auditoria_postgres_exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://auditoria_user:auditoria_secure_password_2025!@postgres:5432/auditoria_db?sslmode=disable
    networks:
      - monitoring_network
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter para métricas de caché
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: auditoria_redis_exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=redis_secure_password_2025!
    networks:
      - monitoring_network
      - backend_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Exporter para métricas de proxy
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: auditoria_nginx_exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9113:9113"
    environment:
      - SCRAPE_URI=http://nginx:8080/nginx_status
      - TELEMETRY_PATH=/metrics
      - NGINX_RETRIES=10
      - NGINX_RETRY_INTERVAL=5s
    networks:
      - monitoring_network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9113/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: auditoria_grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_password_2025!
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migración de base de datos
  migration:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: migration
    container_name: auditoria_migration
    environment:
      - DATABASE_URL=postgresql://auditoria_user:auditoria_secure_password_2025!@postgres:5432/auditoria_db
      - PYTHONPATH=/app
    volumes:
      - ./backend/alembic:/app/alembic:ro
      - ./backend/alembic.ini:/app/alembic.ini:ro
      - ./backend/app:/app/app:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network
    profiles: ["migration"]
    command: >
      sh -c "
        echo 'Esperando a PostgreSQL...' &&
        sleep 15 &&
        echo 'Ejecutando migraciones...' &&
        alembic upgrade head &&
        echo 'Migraciones completadas'
      "

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Redes separadas para mayor seguridad
networks:
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  frontend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
  monitoring_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
